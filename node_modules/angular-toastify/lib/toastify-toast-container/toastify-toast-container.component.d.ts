import { OnInit, ChangeDetectorRef, OnChanges } from '@angular/core';
import { ToastService } from '../toast.service';
import { Toast } from '../toast';
import { ToastType } from '../toast-type';
import * as ɵngcc0 from '@angular/core';
export declare class ToastifyToastContainerComponent implements OnInit, OnChanges {
    private _toastService;
    private _cd;
    private readonly transitionDurations;
    position: 'top-left' | 'top-right' | 'bottom-right' | 'bottom-left';
    transition: 'bounce' | 'slide' | 'zoom' | 'flip';
    autoClose: number;
    hideProgressBar: boolean;
    pauseOnHover: boolean;
    pauseOnVisibilityChange: boolean;
    closeOnClick: boolean;
    newestOnTop: boolean;
    iconLibrary: 'material' | 'font-awesome' | 'none';
    ToastType: typeof ToastType;
    toasts: Toast[];
    toastTransitionDict: {};
    constructor(_toastService: ToastService, _cd: ChangeDetectorRef);
    ngOnChanges(): void;
    dismiss(toast: Toast): void;
    getClass(toast: Toast): string;
    ngOnInit(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ToastifyToastContainerComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ToastifyToastContainerComponent, "lib-toastify-toast-container", never, { "position": "position"; "transition": "transition"; "autoClose": "autoClose"; "hideProgressBar": "hideProgressBar"; "pauseOnHover": "pauseOnHover"; "pauseOnVisibilityChange": "pauseOnVisibilityChange"; "closeOnClick": "closeOnClick"; "newestOnTop": "newestOnTop"; "iconLibrary": "iconLibrary"; }, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9hc3RpZnktdG9hc3QtY29udGFpbmVyLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJ0b2FzdGlmeS10b2FzdC1jb250YWluZXIuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9uSW5pdCwgQ2hhbmdlRGV0ZWN0b3JSZWYsIE9uQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVG9hc3RTZXJ2aWNlIH0gZnJvbSAnLi4vdG9hc3Quc2VydmljZSc7XG5pbXBvcnQgeyBUb2FzdCB9IGZyb20gJy4uL3RvYXN0JztcbmltcG9ydCB7IFRvYXN0VHlwZSB9IGZyb20gJy4uL3RvYXN0LXR5cGUnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgVG9hc3RpZnlUb2FzdENvbnRhaW5lckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzIHtcbiAgICBwcml2YXRlIF90b2FzdFNlcnZpY2U7XG4gICAgcHJpdmF0ZSBfY2Q7XG4gICAgcHJpdmF0ZSByZWFkb25seSB0cmFuc2l0aW9uRHVyYXRpb25zO1xuICAgIHBvc2l0aW9uOiAndG9wLWxlZnQnIHwgJ3RvcC1yaWdodCcgfCAnYm90dG9tLXJpZ2h0JyB8ICdib3R0b20tbGVmdCc7XG4gICAgdHJhbnNpdGlvbjogJ2JvdW5jZScgfCAnc2xpZGUnIHwgJ3pvb20nIHwgJ2ZsaXAnO1xuICAgIGF1dG9DbG9zZTogbnVtYmVyO1xuICAgIGhpZGVQcm9ncmVzc0JhcjogYm9vbGVhbjtcbiAgICBwYXVzZU9uSG92ZXI6IGJvb2xlYW47XG4gICAgcGF1c2VPblZpc2liaWxpdHlDaGFuZ2U6IGJvb2xlYW47XG4gICAgY2xvc2VPbkNsaWNrOiBib29sZWFuO1xuICAgIG5ld2VzdE9uVG9wOiBib29sZWFuO1xuICAgIGljb25MaWJyYXJ5OiAnbWF0ZXJpYWwnIHwgJ2ZvbnQtYXdlc29tZScgfCAnbm9uZSc7XG4gICAgVG9hc3RUeXBlOiB0eXBlb2YgVG9hc3RUeXBlO1xuICAgIHRvYXN0czogVG9hc3RbXTtcbiAgICB0b2FzdFRyYW5zaXRpb25EaWN0OiB7fTtcbiAgICBjb25zdHJ1Y3RvcihfdG9hc3RTZXJ2aWNlOiBUb2FzdFNlcnZpY2UsIF9jZDogQ2hhbmdlRGV0ZWN0b3JSZWYpO1xuICAgIG5nT25DaGFuZ2VzKCk6IHZvaWQ7XG4gICAgZGlzbWlzcyh0b2FzdDogVG9hc3QpOiB2b2lkO1xuICAgIGdldENsYXNzKHRvYXN0OiBUb2FzdCk6IHN0cmluZztcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xufVxuIl19