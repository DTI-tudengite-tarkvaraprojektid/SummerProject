import { EventEmitter, OnInit } from '@angular/core';
import { AccessibleComponent } from '../accessible.component';
import { AccessibilityConfig } from '../../model/accessibility.interface';
import { Image } from '../../model/image.class';
import { InternalLibImage } from '../../model/image-internal.class';
import { DotsConfig } from '../../model/dots-config.interface';
/**
 * Component with clickable dots (small circles) to navigate between images inside the modal gallery.
 */
import * as ɵngcc0 from '@angular/core';
export declare class DotsComponent extends AccessibleComponent implements OnInit {
    /**
     * Object of type `InternalLibImage` that represent the visible image.
     */
    currentImage: InternalLibImage;
    /**
     * Array of `InternalLibImage` that represent the model of this library with all images,
     * thumbs and so on.
     */
    images: InternalLibImage[];
    /**
     * Object of type `DotsConfig` to init DotsComponent's features.
     * For instance, it contains a param to show/hide this component.
     */
    dotsConfig: DotsConfig;
    /**
     * Object of type `AccessibilityConfig` to init custom accessibility features.
     * For instance, it contains titles, alt texts, aria-labels and so on.
     */
    accessibilityConfig: AccessibilityConfig;
    /**
     * Output to emit clicks on dots. The payload contains a number that represent
     * the index of the clicked dot.
     */
    clickDot: EventEmitter<number>;
    /**
     * Object of type `DotsConfig` exposed to the template. This field is initialized
     * applying transformations, default values and so on to the input of the same type.
     */
    configDots: DotsConfig;
    /**
     * Method ´ngOnInit´ to build `configDots` applying a default value.
     * This is an Angular's lifecycle hook, so its called automatically by Angular itself.
     * In particular, it's called only one time!!!
     */
    ngOnInit(): void;
    /**
     * Method to check if an image is active (i.e. the current image).
     * It checks currentImage and images to prevent errors.
     * @param {number} index of the image to check if it's active or not
     * @returns {boolean} true if is active (and input params are valid), false otherwise
     */
    isActive(index: number): boolean;
    /**
     * Method called by events from keyboard and mouse.
     * @param {number} index of the dot
     * @param {KeyboardEvent | MouseEvent} event payload
     */
    onDotEvent(index: number, event: KeyboardEvent | MouseEvent): void;
    /**
     * Method used in the template to track ids in ngFor.
     * @param {number} index of the array
     * @param {Image} item of the array
     * @returns {number} the id of the item
     */
    trackById(index: number, item: Image): number;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DotsComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<DotsComponent, "ks-dots", never, { "dotsConfig": "dotsConfig"; "currentImage": "currentImage"; "images": "images"; "accessibilityConfig": "accessibilityConfig"; }, { "clickDot": "clickDot"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG90cy5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiZG90cy5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWNjZXNzaWJsZUNvbXBvbmVudCB9IGZyb20gJy4uL2FjY2Vzc2libGUuY29tcG9uZW50JztcbmltcG9ydCB7IEFjY2Vzc2liaWxpdHlDb25maWcgfSBmcm9tICcuLi8uLi9tb2RlbC9hY2Nlc3NpYmlsaXR5LmludGVyZmFjZSc7XG5pbXBvcnQgeyBJbWFnZSB9IGZyb20gJy4uLy4uL21vZGVsL2ltYWdlLmNsYXNzJztcbmltcG9ydCB7IEludGVybmFsTGliSW1hZ2UgfSBmcm9tICcuLi8uLi9tb2RlbC9pbWFnZS1pbnRlcm5hbC5jbGFzcyc7XG5pbXBvcnQgeyBEb3RzQ29uZmlnIH0gZnJvbSAnLi4vLi4vbW9kZWwvZG90cy1jb25maWcuaW50ZXJmYWNlJztcbi8qKlxuICogQ29tcG9uZW50IHdpdGggY2xpY2thYmxlIGRvdHMgKHNtYWxsIGNpcmNsZXMpIHRvIG5hdmlnYXRlIGJldHdlZW4gaW1hZ2VzIGluc2lkZSB0aGUgbW9kYWwgZ2FsbGVyeS5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgRG90c0NvbXBvbmVudCBleHRlbmRzIEFjY2Vzc2libGVDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICAgIC8qKlxuICAgICAqIE9iamVjdCBvZiB0eXBlIGBJbnRlcm5hbExpYkltYWdlYCB0aGF0IHJlcHJlc2VudCB0aGUgdmlzaWJsZSBpbWFnZS5cbiAgICAgKi9cbiAgICBjdXJyZW50SW1hZ2U6IEludGVybmFsTGliSW1hZ2U7XG4gICAgLyoqXG4gICAgICogQXJyYXkgb2YgYEludGVybmFsTGliSW1hZ2VgIHRoYXQgcmVwcmVzZW50IHRoZSBtb2RlbCBvZiB0aGlzIGxpYnJhcnkgd2l0aCBhbGwgaW1hZ2VzLFxuICAgICAqIHRodW1icyBhbmQgc28gb24uXG4gICAgICovXG4gICAgaW1hZ2VzOiBJbnRlcm5hbExpYkltYWdlW107XG4gICAgLyoqXG4gICAgICogT2JqZWN0IG9mIHR5cGUgYERvdHNDb25maWdgIHRvIGluaXQgRG90c0NvbXBvbmVudCdzIGZlYXR1cmVzLlxuICAgICAqIEZvciBpbnN0YW5jZSwgaXQgY29udGFpbnMgYSBwYXJhbSB0byBzaG93L2hpZGUgdGhpcyBjb21wb25lbnQuXG4gICAgICovXG4gICAgZG90c0NvbmZpZzogRG90c0NvbmZpZztcbiAgICAvKipcbiAgICAgKiBPYmplY3Qgb2YgdHlwZSBgQWNjZXNzaWJpbGl0eUNvbmZpZ2AgdG8gaW5pdCBjdXN0b20gYWNjZXNzaWJpbGl0eSBmZWF0dXJlcy5cbiAgICAgKiBGb3IgaW5zdGFuY2UsIGl0IGNvbnRhaW5zIHRpdGxlcywgYWx0IHRleHRzLCBhcmlhLWxhYmVscyBhbmQgc28gb24uXG4gICAgICovXG4gICAgYWNjZXNzaWJpbGl0eUNvbmZpZzogQWNjZXNzaWJpbGl0eUNvbmZpZztcbiAgICAvKipcbiAgICAgKiBPdXRwdXQgdG8gZW1pdCBjbGlja3Mgb24gZG90cy4gVGhlIHBheWxvYWQgY29udGFpbnMgYSBudW1iZXIgdGhhdCByZXByZXNlbnRcbiAgICAgKiB0aGUgaW5kZXggb2YgdGhlIGNsaWNrZWQgZG90LlxuICAgICAqL1xuICAgIGNsaWNrRG90OiBFdmVudEVtaXR0ZXI8bnVtYmVyPjtcbiAgICAvKipcbiAgICAgKiBPYmplY3Qgb2YgdHlwZSBgRG90c0NvbmZpZ2AgZXhwb3NlZCB0byB0aGUgdGVtcGxhdGUuIFRoaXMgZmllbGQgaXMgaW5pdGlhbGl6ZWRcbiAgICAgKiBhcHBseWluZyB0cmFuc2Zvcm1hdGlvbnMsIGRlZmF1bHQgdmFsdWVzIGFuZCBzbyBvbiB0byB0aGUgaW5wdXQgb2YgdGhlIHNhbWUgdHlwZS5cbiAgICAgKi9cbiAgICBjb25maWdEb3RzOiBEb3RzQ29uZmlnO1xuICAgIC8qKlxuICAgICAqIE1ldGhvZCDCtG5nT25Jbml0wrQgdG8gYnVpbGQgYGNvbmZpZ0RvdHNgIGFwcGx5aW5nIGEgZGVmYXVsdCB2YWx1ZS5cbiAgICAgKiBUaGlzIGlzIGFuIEFuZ3VsYXIncyBsaWZlY3ljbGUgaG9vaywgc28gaXRzIGNhbGxlZCBhdXRvbWF0aWNhbGx5IGJ5IEFuZ3VsYXIgaXRzZWxmLlxuICAgICAqIEluIHBhcnRpY3VsYXIsIGl0J3MgY2FsbGVkIG9ubHkgb25lIHRpbWUhISFcbiAgICAgKi9cbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIE1ldGhvZCB0byBjaGVjayBpZiBhbiBpbWFnZSBpcyBhY3RpdmUgKGkuZS4gdGhlIGN1cnJlbnQgaW1hZ2UpLlxuICAgICAqIEl0IGNoZWNrcyBjdXJyZW50SW1hZ2UgYW5kIGltYWdlcyB0byBwcmV2ZW50IGVycm9ycy5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggb2YgdGhlIGltYWdlIHRvIGNoZWNrIGlmIGl0J3MgYWN0aXZlIG9yIG5vdFxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSB0cnVlIGlmIGlzIGFjdGl2ZSAoYW5kIGlucHV0IHBhcmFtcyBhcmUgdmFsaWQpLCBmYWxzZSBvdGhlcndpc2VcbiAgICAgKi9cbiAgICBpc0FjdGl2ZShpbmRleDogbnVtYmVyKTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBNZXRob2QgY2FsbGVkIGJ5IGV2ZW50cyBmcm9tIGtleWJvYXJkIGFuZCBtb3VzZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggb2YgdGhlIGRvdFxuICAgICAqIEBwYXJhbSB7S2V5Ym9hcmRFdmVudCB8IE1vdXNlRXZlbnR9IGV2ZW50IHBheWxvYWRcbiAgICAgKi9cbiAgICBvbkRvdEV2ZW50KGluZGV4OiBudW1iZXIsIGV2ZW50OiBLZXlib2FyZEV2ZW50IHwgTW91c2VFdmVudCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogTWV0aG9kIHVzZWQgaW4gdGhlIHRlbXBsYXRlIHRvIHRyYWNrIGlkcyBpbiBuZ0Zvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggb2YgdGhlIGFycmF5XG4gICAgICogQHBhcmFtIHtJbWFnZX0gaXRlbSBvZiB0aGUgYXJyYXlcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSB0aGUgaWQgb2YgdGhlIGl0ZW1cbiAgICAgKi9cbiAgICB0cmFja0J5SWQoaW5kZXg6IG51bWJlciwgaXRlbTogSW1hZ2UpOiBudW1iZXI7XG59XG4iXX0=