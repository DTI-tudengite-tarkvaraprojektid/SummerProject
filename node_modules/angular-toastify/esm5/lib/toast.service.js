/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, EventEmitter } from '@angular/core';
import { Toast } from './toast';
import { ToastType } from './toast-type';
import * as i0 from "@angular/core";
var ToastService = /** @class */ (function () {
    function ToastService() {
        this.toastAddedEvent = new EventEmitter();
        this.dismissAllEvent = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ToastService.prototype.dismissAll = /**
     * @return {?}
     */
    function () {
        this.dismissAllEvent.emit();
    };
    /**
     * @param {?} message
     * @return {?}
     */
    ToastService.prototype.info = /**
     * @param {?} message
     * @return {?}
     */
    function (message) {
        /** @type {?} */
        var toast = new Toast(message, ToastType.info);
        this.toastAddedEvent.emit(toast);
    };
    /**
     * @param {?} message
     * @return {?}
     */
    ToastService.prototype.success = /**
     * @param {?} message
     * @return {?}
     */
    function (message) {
        /** @type {?} */
        var toast = new Toast(message, ToastType.success);
        this.toastAddedEvent.emit(toast);
    };
    /**
     * @param {?} message
     * @return {?}
     */
    ToastService.prototype.warn = /**
     * @param {?} message
     * @return {?}
     */
    function (message) {
        /** @type {?} */
        var toast = new Toast(message, ToastType.warning);
        this.toastAddedEvent.emit(toast);
    };
    /**
     * @param {?} message
     * @return {?}
     */
    ToastService.prototype.error = /**
     * @param {?} message
     * @return {?}
     */
    function (message) {
        /** @type {?} */
        var toast = new Toast(message, ToastType.error);
        this.toastAddedEvent.emit(toast);
    };
    /**
     * @param {?} message
     * @return {?}
     */
    ToastService.prototype.default = /**
     * @param {?} message
     * @return {?}
     */
    function (message) {
        /** @type {?} */
        var toast = new Toast(message, ToastType.default);
        this.toastAddedEvent.emit(toast);
    };
    ToastService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    ToastService.ctorParameters = function () { return []; };
    /** @nocollapse */ ToastService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function ToastService_Factory() { return new ToastService(); }, token: ToastService, providedIn: "root" });
    return ToastService;
}());
export { ToastService };
if (false) {
    /** @type {?} */
    ToastService.prototype.toastAddedEvent;
    /** @type {?} */
    ToastService.prototype.dismissAllEvent;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9hc3Quc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItdG9hc3RpZnkvIiwic291cmNlcyI6WyJsaWIvdG9hc3Quc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekQsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUNoQyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sY0FBYyxDQUFDOztBQUV6QztJQU1FO1FBREEsb0JBQWUsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBR3JDLG9CQUFlLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQUZyQixDQUFDOzs7O0lBSWpCLGlDQUFVOzs7SUFBVjtRQUNFLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDOUIsQ0FBQzs7Ozs7SUFFRCwyQkFBSTs7OztJQUFKLFVBQUssT0FBZTs7WUFDWixLQUFLLEdBQUcsSUFBSSxLQUFLLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUM7UUFDaEQsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbkMsQ0FBQzs7Ozs7SUFFRCw4QkFBTzs7OztJQUFQLFVBQVEsT0FBZTs7WUFDZixLQUFLLEdBQUcsSUFBSSxLQUFLLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxPQUFPLENBQUM7UUFDbkQsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbkMsQ0FBQzs7Ozs7SUFFRCwyQkFBSTs7OztJQUFKLFVBQUssT0FBZTs7WUFDWixLQUFLLEdBQUcsSUFBSSxLQUFLLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxPQUFPLENBQUM7UUFDbkQsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbkMsQ0FBQzs7Ozs7SUFFRCw0QkFBSzs7OztJQUFMLFVBQU0sT0FBZTs7WUFDYixLQUFLLEdBQUcsSUFBSSxLQUFLLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxLQUFLLENBQUM7UUFDakQsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbkMsQ0FBQzs7Ozs7SUFFRCw4QkFBTzs7OztJQUFQLFVBQVEsT0FBZTs7WUFDZixLQUFLLEdBQUcsSUFBSSxLQUFLLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxPQUFPLENBQUM7UUFDbkQsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbkMsQ0FBQzs7Z0JBckNGLFVBQVUsU0FBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkI7Ozs7O3VCQU5EO0NBMENDLEFBdENELElBc0NDO1NBbkNZLFlBQVk7OztJQUV2Qix1Q0FBcUM7O0lBR3JDLHVDQUFxQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVG9hc3QgfSBmcm9tICcuL3RvYXN0JztcbmltcG9ydCB7IFRvYXN0VHlwZSB9IGZyb20gJy4vdG9hc3QtdHlwZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIFRvYXN0U2VydmljZSB7XG5cbiAgdG9hc3RBZGRlZEV2ZW50ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICBjb25zdHJ1Y3RvcigpIHsgfVxuXG4gIGRpc21pc3NBbGxFdmVudCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICBkaXNtaXNzQWxsKCkge1xuICAgIHRoaXMuZGlzbWlzc0FsbEV2ZW50LmVtaXQoKTtcbiAgfVxuXG4gIGluZm8obWVzc2FnZTogc3RyaW5nKSB7XG4gICAgY29uc3QgdG9hc3QgPSBuZXcgVG9hc3QobWVzc2FnZSwgVG9hc3RUeXBlLmluZm8pO1xuICAgIHRoaXMudG9hc3RBZGRlZEV2ZW50LmVtaXQodG9hc3QpO1xuICB9XG5cbiAgc3VjY2VzcyhtZXNzYWdlOiBzdHJpbmcpIHtcbiAgICBjb25zdCB0b2FzdCA9IG5ldyBUb2FzdChtZXNzYWdlLCBUb2FzdFR5cGUuc3VjY2Vzcyk7XG4gICAgdGhpcy50b2FzdEFkZGVkRXZlbnQuZW1pdCh0b2FzdCk7XG4gIH1cblxuICB3YXJuKG1lc3NhZ2U6IHN0cmluZykge1xuICAgIGNvbnN0IHRvYXN0ID0gbmV3IFRvYXN0KG1lc3NhZ2UsIFRvYXN0VHlwZS53YXJuaW5nKTtcbiAgICB0aGlzLnRvYXN0QWRkZWRFdmVudC5lbWl0KHRvYXN0KTtcbiAgfVxuXG4gIGVycm9yKG1lc3NhZ2U6IHN0cmluZykge1xuICAgIGNvbnN0IHRvYXN0ID0gbmV3IFRvYXN0KG1lc3NhZ2UsIFRvYXN0VHlwZS5lcnJvcik7XG4gICAgdGhpcy50b2FzdEFkZGVkRXZlbnQuZW1pdCh0b2FzdCk7XG4gIH1cblxuICBkZWZhdWx0KG1lc3NhZ2U6IHN0cmluZykge1xuICAgIGNvbnN0IHRvYXN0ID0gbmV3IFRvYXN0KG1lc3NhZ2UsIFRvYXN0VHlwZS5kZWZhdWx0KTtcbiAgICB0aGlzLnRvYXN0QWRkZWRFdmVudC5lbWl0KHRvYXN0KTtcbiAgfVxufVxuIl19